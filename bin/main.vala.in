


//private Itmages.UploaderWindow window;


private void on_bus_aquired (GLib.DBusConnection conn) {
    var upserv = new Itmages.UploaderMiniServer (Itmages.UploaderWindow.get_default ());
    try {
        conn.register_object (Itmages.UPLOADER_DBUS_PATH, upserv);
    } catch (GLib.IOError e) {
        stderr.printf ("Could not register service\n");
    }
}


public void start_server () {
    GLib.Bus.own_name (
                        GLib.BusType.SESSION,
                        Itmages.UPLOADER_DBUS_IFACE,
                        GLib.BusNameOwnerFlags.NONE,
                        on_bus_aquired,
                        () => {},
                        () => stderr.printf ("Could not aquire name\n")
                      );
}


private void start_func (string[] args) {
    Gtk.init (ref args);

    Itmages.UploaderMiniClient client = null;
    try {
        client = GLib.Bus.get_proxy_sync<Itmages.UploaderMiniClient> (
                                            GLib.BusType.SESSION,
                                            Itmages.UPLOADER_DBUS_IFACE,
                                            Itmages.UPLOADER_DBUS_PATH
                                        );
        if (client.ping ()) {
            client.append_files (args, true, false);
        }
        
    } catch (GLib.Error err) {
        stdout.printf ("Opening a new window for ITmages uploads\n");
        Itmages.UploaderWindow window;
        window = Itmages.UploaderWindow.get_default ();

@HasUnity@        UploaderUnityEntry launcher;
@HasUnity@        launcher = new UploaderUnityEntry.with_parent (window);

        start_server ();
        window.show_all ();
        for (var i = 1; i < args.length; ++i) {
            window.append (args[i]);
        }
        window.quiting.connect (() => {Gtk.main_quit ();});
        Gtk.main (); 
    }
}

public void main (string[] argv) {
    start_func (argv);
}
